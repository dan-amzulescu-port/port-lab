name: Scaffold Service

on:
  workflow_dispatch:
    inputs:
      service_name:
        description: 'The name of the service'
        required: true
        default: 'my-service'
        minLength: 3
        maxLength: 50
        pattern: '^[a-zA-Z0-9]([-_a-zA-Z0-9]{1,48})[a-zA-Z0-9]$'
      programming_language:
        description: 'Programming language for the service'
        required: true
        default: 'Python'
      author_email:
        description: 'Author email'
        required: true
      license:
        description: 'License type'
        required: true
        default: 'MIT'
      version:
        description: 'Initial version of the service'
        required: true
        default: '0.1.0'
        minLength: 5
        maxLength: 20
        pattern: '^(\d+\.\d+\.\d+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?)$'
      repository_visibility:
        description: 'Repository visibility'
        required: true
        default: 'public'
      port_context:
        description: 'Port context information'
        required: false
        default: '{}'

jobs:
  scaffold:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      run: |
        # Notify PORT that the repository checkout is complete
        curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
        -H "Content-Type: application/json" \
        -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
        -d '{"message": "Checked out repository."}'

    - name: Set up Python
      if: ${{ inputs.programming_language == 'Python' }}
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
      run: |
        # Notify PORT that Python environment setup is complete
        curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
        -H "Content-Type: application/json" \
        -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
        -d '{"message": "Set up Python environment."}'

    - name: Set up Node.js
      if: ${{ inputs.programming_language == 'JavaScript' }}
      uses: actions/setup-node@v2
      with:
        node-version: '14'
      run: |
        # Notify PORT that Node.js environment setup is complete
        curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
        -H "Content-Type: application/json" \
        -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
        -d '{"message": "Set up Node.js environment."}'

    - name: Notify PORT - Start
      run: |
        # Notify PORT that service scaffolding has started
        curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
        -H "Content-Type: application/json" \
        -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
        -d '{"message": "Scaffolding service started..."}'

    - name: Scaffold service
      run: |
        # Log the start of service scaffolding
        echo "Scaffolding service..."
        curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
        -H "Content-Type: application/json" \
        -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
        -d '{"message": "Service scaffolding initiated."}'
        
        # Log details about the service being scaffolded
        echo "Service Name: ${{ inputs.service_name }}"
        echo "Programming Language: ${{ inputs.programming_language }}"
        echo "Author: ${{ inputs.author_name }}"
        echo "License: ${{ inputs.license }}"
        echo "Version: ${{ inputs.version }}"
        echo "Repository Visibility: ${{ inputs.repository_visibility }}"
        echo "Port Context: ${{ inputs.port_context }}"

        # Create service directory and move into it
        mkdir ${{ inputs.service_name }}
        cd ${{ inputs.service_name }}

        # Log creation of service directory
        curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
        -H "Content-Type: application/json" \
        -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
        -d '{"message": "Created service directory ${{ inputs.service_name }}."}'

        # Handle different license types and create LICENSE file
        case ${{ inputs.license }} in
          "MIT")
            curl -o LICENSE https://opensource.org/licenses/MIT
            echo "MIT License created."
            curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
            -d '{"message": "MIT License file created."}'
            ;;
          "Apache-2.0")
            curl -o LICENSE https://www.apache.org/licenses/LICENSE-2.0.txt
            echo "Apache-2.0 License created."
            curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
            -d '{"message": "Apache-2.0 License file created."}'
            ;;
          "GPL-3.0")
            curl -o LICENSE https://www.gnu.org/licenses/gpl-3.0.txt
            echo "GPL-3.0 License created."
            curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
            -d '{"message": "GPL-3.0 License file created."}'
            ;;
          *)
            echo "License type not supported. Please add manually."
            curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
            -d '{"message": "License type not supported. Please add manually."}'
            ;;
        esac
        
        # Create version file
        echo ${{ inputs.version }} > VERSION
        echo "Version file created."
        curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
        -H "Content-Type: application/json" \
        -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
        -d '{"message": "Version file created."}'

        # Set up the project based on the chosen programming language
        if [ "${{ inputs.programming_language }}" == "Python" ]; then
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          echo "print('Hello, world!')" > main.py
          echo "Python project scaffolded."
          curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
          -H "Content-Type: application/json" \
          -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
          -d '{"message": "Python project scaffolded."}'
        elif [ "${{ inputs.programming_language }}" == "JavaScript" ]; then
          npm init -y
          echo "console.log('Hello, world!');" > index.js
          echo "JavaScript project scaffolded."
          curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
          -H "Content-Type: application/json" \
          -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
          -d '{"message": "JavaScript project scaffolded."}'
        fi

        # Initialize Git repository
        git init
        echo "Initialized Git repository."
        curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
        -H "Content-Type: application/json" \
        -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
        -d '{"message": "Initialized Git repository."}'
        
        # Configure Git user and commit initial files
        git config user.name '${{ inputs.author_name }}'
        git config user.email '${{ inputs.author_email}}'
        git add .
        git commit -m "Initial commit"
        echo "Committed initial files to Git."
        curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
        -H "Content-Type: application/json" \
        -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
        -d '{"message": "Committed initial files to Git."}'

    - name: Notify PORT - Complete
      run: |
        # Notify PORT that service scaffolding is complete
        curl -X POST https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_context).runId }}/logs \
        -H "Content-Type: application/json" \
        -H "Authorization: ${{ secrets.PORT_JWT_TOKEN }}" \
        -d '{"message": "Scaffolding service complete.", "terminationStatus": "SUCCESS", "statusLabel": "Completed successfully!"}'
